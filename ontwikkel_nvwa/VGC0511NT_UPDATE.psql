
/*  VGC0511NT_UPDATE

    Deze procedure doet een GetClassificationTreeUpdatesRequest om de lijst van gewijzigde gncodes te achterhalen
    tussen een bepaald begin- en eindtijdstip dat wordt meegegeven
    Bedoeling is om hiermee de load van het bijhouden gegevens van gncodes te beperken

    De gncodes waarin wijzigingen hebben plaatsgevonden staan in het antwoord (GetClassificationTreeUpdatesResponse).
    Deze lijst van codes worden doorlopen en hun gegevens worden gesynchroniseerd door aanroep van
    procedure VGC11NT

    Parameters:

    P_TYPE  -             kan zijn 'LNV',     (nonamimals, chedd)
                                   'LPJ',     (animals, cheda)
                                   'NPJ'      (animalproducts, chedp)
                                   of anders  (fyto, chedpp)
    P_STARTDT            begindatumtijd
    P_EINDDT             einddatumtijd
*/
procedure VGC0511NT_UPDATE (
   p_retrieval_type IN VGC_COLLI.CLO_TYPE%TYPE,
   p_startdatum date,
   p_einddatum date) is

    upd_msg_xml                 xmltype;
    v_username              varchar2(100);
    v_password              varchar2(100);
    v_objectnaam            vgc_batchlog.proces%type := g_package_name || '.VGC0511NT_UPDATE#1';
    v_ws_naam               varchar2(100 char)   := 'retrieveReferenceData';

    v_retrieval_type        varchar2(10 char);
    r_rqt                   vgc_requests%rowtype;
    v_antwoord              xmltype;

  function maak_tree_updates_request (
            p_retrieval_type in varchar2,   -- bijv 'chedp'
            p_username in varchar2,
            p_password in varchar2) return xmltype is

            l_BeginDTTimestampString varchar(100);
            l_EindDTTimestampString varchar(100);

            l_ExpireTimestampString varchar(100);
            l_CreateTimestampString varchar(100);


            l_nonce_b64                  varchar2(24 char);
            l_nonce_raw                  raw(100);
            l_password_digest_b64        varchar2(100);
            l_timestamp_char        varchar2(100);
            v_timestamp             timestamp;

            resultval               xmltype;
    begin

            -- Laat de startdatumtijd en einddatumtijd beginnen respectievelijk starten op 02:00 's nachts
            -- op de meegegeven datums

            -- correcte formaat moet zijn 2022-02-01T00:00:00.000+02:00

            l_BeginDTTimestampString :=  to_char(p_startdatum, 'YYYY-MM-DD')|| 'T00:00:00.000+02:00';
            l_EindDTTimestampString  :=  to_char(p_einddatum,  'YYYY-MM-DD')|| 'T00:00:00.000+02:00';


            v_timestamp := systimestamp;
            l_timestamp_char      := to_char(systimestamp,'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"');
            l_nonce_raw           := utl_i18n.string_to_raw(dbms_random.string('a',16),'utf8');
            l_nonce_b64           := utl_i18n.raw_to_char(utl_encode.base64_encode(l_nonce_raw),'utf8');
            l_ExpireTimestampString := to_char(v_timestamp,'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"');
            l_CreateTimestampString := to_char(v_timestamp,'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"');
            v_timestamp :=v_timestamp + 3/1440;
            l_ExpireTimestampString := to_char(v_timestamp,'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"');
            l_password_digest_b64 := utl_i18n.raw_to_char
                                 ( utl_encode.base64_encode
                                   ( dbms_crypto.hash
                                     ( l_nonce_raw||utl_i18n.string_to_raw(l_timestamp_char||v_password,'utf8')
                                     , dbms_crypto.hash_sh1
                                     )
                                   )
                                 , 'utf8'
                                 );



        select
             xmlelement("soapenv:Envelope"
      ,        xmlattributes ( 'http://schemas.xmlsoap.org/soap/envelope/' as "xmlns:soapenv"
      ,                'http://ec.europa.eu/sanco/tracesnt/base/v4' as "xmlns:v4"
      ,                'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd' as "xmlns:oas"
      ,                'http://ec.europa.eu/tracesnt/referencedata/v1' as "xmlns:v1"
      ,                'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd' as "xmlns:wsu")
      ,        xmlelement("soapenv:Header"
--      ,          xmlattributes( 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd' as "xmlns:wsse"
--                              , 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'  as "xmlns:wsu")
      ,          xmlelement("v4:LanguageCode",'nl')
      ,          xmlelement("v4:WebServiceClientId",'vgc-client')
      ,          xmlelement("oas:Security"
      ,            xmlelement("oas:UsernameToken"
      ,            xmlattributes( 'UsernameToken-A5B8D7123A55CB6A75153751937547586' as "wsu:Id" )
      ,              xmlelement("oas:Username", v_username)
      ,              xmlelement("oas:Password"
      ,                xmlattributes( 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest' as "Type" )
      ,                l_password_digest_b64)
      ,              xmlelement("oas:Nonce", l_nonce_b64)
      ,              xmlelement("wsu:Created", l_CreateTimestampString)
                   )
      ,            xmlelement("wsu:Timestamp"
      ,              xmlelement("wsu:Created", l_CreateTimestampString)
      ,              xmlelement("wsu:Expires", l_ExpireTimestampString)
                   )
                 )
               )
      ,        xmlelement("soapenv:Body"
      ,          xmlattributes( 'http://schemas.xmlsoap.org/soap/envelope/' as "xmlns:soapenv")
      ,          xmlelement("v1:GetClassificationTreeUpdatesRequest"
      ,            xmlattributes( 'http://ec.europa.eu/tracesnt/referencedata/v1' as "xmlns:v1")
      ,            xmlelement("v1:TreeID", p_retrieval_type)
      ,            xmlelement("v1:UpdateDateTimeRange"
      ,              xmlelement("v4:From", l_BeginDTTimestampString)
      ,              xmlelement("v4:To", l_EindDTTimestampString)
                   )
                 )
               )
             )
              into resultval
              from dual
            ;
            return resultval;
    end; -- maak_tree_updates_request

  procedure verwerk_upd_req_antwoord (v_antwoord xmltype)
  is
    v_response xmltype;
    v_commodities xmltype;

    v_ns varchar(400 char) :=
      'xmlns:ns10="http://ec.europa.eu/tracesnt/referencedata/nodeattribute/v1" xmlns:ns9="http://ec.europa.eu/tracesnt/referencedata/classificationtree/v1"';
       cursor c_rqt(i_xml xmltype, i_ns varchar2)
        is
          select extract(value(rqt), '/ns9:Node/ns9:CNCode/text()', i_ns).getStringVal() gn_code
          ,      extract(value(rqt), '/ns9:Node/ns9:Description/text()', i_ns).getStringVal() gn_code_meaning
          from table( xmlsequence(i_xml)) rqt;

    type t_gncode_array is table of varchar(20)
        index by pls_integer;
    v_gncodearray  t_gncode_array;
    v_gncodecount  integer := 0;

    begin
       v_response :=
            vgc_xml.extractxml(v_antwoord,
              '//ns12:GetClassificationTreeUpdatesResponse',
              'xmlns:ns12="http://ec.europa.eu/tracesnt/referencedata/v1"');


       insert into adriaan_log( logmsg, clobwaarde) values (
         'v_response:',
         v_response.getClobval());

       v_commodities := vgc_xml.extractxml( v_response, '//ns9:Node', v_ns);

       insert into  adriaan_log ( logmsg, clobwaarde)
       values   ('v_commodities:', v_commodities.getClobval());


       for r_rqt in c_rqt(v_commodities, v_ns)
          loop
            declare
              v_tge vgc_tnt_gn_codes%rowtype;
              v_errcode number;
              v_errm varchar(64);
            begin
              v_tge.gn_code          := r_rqt.gn_code;
              v_tge.gn_code_meaning  := replace(replace(replace(r_rqt.gn_code_meaning,chr(38)||'apos;',''''),chr(38)||'amp;','"'),chr(38)||'quot;','"');
              if (v_tge.gn_code is not null) then
                  begin
                      if not(v_gncodearray.exists(v_tge.gn_code)) then
                            insert into adriaan_log(gncode, logmsg)
                            values (r_rqt.gn_code, v_tge.gn_code_meaning);


                            v_gncodecount := v_gncodecount + 1;
                            v_gncodearray (v_gncodecount) := v_tge.gn_code;

                              insert into adriaan_log(gncode, logmsg)
                               values (r_rqt.gn_code, 'ophalen via VGC0511NT:' || v_tge.gn_code_meaning);
                               commit;
                               VGC0511nt(r_rqt.gn_code, p_retrieval_type);

                      else
                            insert into adriaan_log(gncode, logmsg)
                            values (r_rqt.gn_code, 'al gehad:' || v_tge.gn_code_meaning);
                            commit;
                      end if;
                  exception
                    when others then
                      v_errcode := sqlcode;
                      v_errm := substr(sqlerrm, 1, 64);
                      insert into adriaan_log(logmsg)
                            values ('Error code ' || v_errcode || ': ' || v_errm);
                  end;
              end if;

            end;
          end loop;

    end; -- verwerk_upd_req_antwoord


begin
    delete from adriaan_log;
    commit;

     -- bepaal het retrieval_type voor het bericht vanuit de parameter p_retrieval_type
     v_retrieval_type := 'chedpp';  -- default
     if p_retrieval_type = 'LNV' then
       v_retrieval_type := 'chedd'; -- LNV
     end if;
     if p_retrieval_type = 'LPJ' then
       v_retrieval_type := 'cheda'; -- LPJ
     end if;
     if p_retrieval_type = 'NPJ' then
       v_retrieval_type := 'chedp'; -- NPJ
     end if;

    insert into adriaan_log(logmsg)
    values  ('VGC0511NT_UPDATE update gncodes ' || p_retrieval_type || ' (' || v_retrieval_type
             || ') van ' || to_char(p_startdatum, 'DD-MM-YYYY')
             || '  tm  ' || to_char(p_einddatum, 'DD-MM-YYYY') );
    commit;

    -- bepaal username en password voor het bericht
    v_username := vgc$algemeen.get_appl_register('TNT_USERNAME_GN_CODES_WS');
    v_password := vgc$algemeen.get_appl_register('TNT_PASSWORD_GN_CODES_WS');

    -- bepaal de soort (chedp etc) en de periode om in te vullen in het bericht
    -- bouw het bericht in upd_msg_xml
    upd_msg_xml :=  maak_tree_updates_request(v_retrieval_type, v_username, v_password);

    insert into adriaan_log(logmsg, clobwaarde)
    values  ('upd msg1', upd_msg_xml.getClobval());
    commit;

    r_rqt.webservice_bericht := upd_msg_xml.getClobVal;
    escape_xml(r_rqt.webservice_bericht);
    r_rqt.request_id             := null;
    r_rqt.webservice_url         := vgc$algemeen.get_appl_register ('TNT_GN_CODES_WEBSERVICE');
    r_rqt.bestemd_voor           := 'TNT';
    r_rqt.webservice_logische_naam := 'VGC0501NT_UPDATE';
    r_rqt.status := vgc_ws_requests.kp_in_uitvoering;
    r_rqt.resultaat := v_retrieval_type;


    -- doe het httprequest en log dit
    begin
        vgc_ws_requests_nt.maak_http_request (r_rqt);
        vgc_ws_requests_nt.log_request(r_rqt);
    exception
        when others
        then
            vgc_blg.write_log('Fout in versturen request' , v_objectnaam, 'J', 5);
            raise;
    end;



     -- indien fout bij aanroepen webservice geef foutmelding en stop verwerking
    if r_rqt.webservice_returncode <> 200
    then
        vgc_blg.write_log('Webservice geeft http-code: ' || r_rqt.webservice_returncode, v_objectnaam, 'J', 5);
        raise_application_error(-20000, 'VGC-00502 #1' || v_ws_naam ||': Webservice geeft HTTP-code: ' || r_rqt.webservice_returncode);
    end if;

    v_antwoord := xmltype(r_rqt.webservice_antwoord);

    insert into adriaan_log(logmsg, clobwaarde)
    values  ('antwoord_updreq', v_antwoord.getClobval());
    commit;

    -- verwerk response
    verwerk_upd_req_antwoord (v_antwoord);

    insert into adriaan_log(logmsg)
    values  ('klaar met verwerken upd req');
    commit;
end;
